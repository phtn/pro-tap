/**
 * Converts a MAC address to a random string using the MAC address as a seed
 * @param macAddress - MAC address in format XX:XX:XX:XX:XX:XX:XX or XX:XX:XX:XX:XX:XX
 * @param length - Desired length of the output string (default: 16)
 * @returns A deterministic random string based on the MAC address
 */
export function macStr(macAddress: string, length: number = 16): string {
  // Validate MAC address format
  const macRegex = /^([0-9A-Fa-f]{2}:){5,6}[0-9A-Fa-f]{2}$/
  if (!macRegex.test(macAddress)) {
    throw new Error(
      'Invalid MAC address format. Expected format: XX:XX:XX:XX:XX:XX or XX:XX:XX:XX:XX:XX:XX',
    )
  }

  // Remove colons and convert to lowercase
  const cleanMac = macAddress.replace(/:/g, '').toLowerCase()

  // Create a simple seeded random number generator
  const seed = parseInt(cleanMac.slice(0, 8), 16)

  // Simple seeded PRNG (Linear Congruential Generator)
  let state = seed
  const random = (): number => {
    state = (state * 1664525 + 1013904223) % 4294967296
    return state / 4294967296
  }

  // Generate random string
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  let result = ''

  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(random() * chars.length)
    result += chars[randomIndex]
  }

  return result
}

/**
 * Converts a random string back to its original MAC address
 * @param randomString - The random string generated by macAddressToRandomString
 * @param possibleMacAddresses - Array of possible MAC addresses to check against
 * @returns The matching MAC address or null if not found
 */
export function strMac(
  randomString: string,
  possibleMacAddresses: string[],
): string | null {
  for (const mac of possibleMacAddresses) {
    const generated = macStr(mac, randomString.length)
    if (generated === randomString) {
      return mac
    }
  }
  return null
}

/**
 * Alternative reverse function that stores the mapping
 */
export class MacAddressConverter {
  private mapping: Map<string, string> = new Map()

  /**
   * Converts MAC address to random string and stores the mapping
   */
  encode(macAddress: string, length: number = 16): string {
    const randomString = macStr(macAddress, length)
    this.mapping.set(randomString, macAddress)
    return randomString
  }

  /**
   * Converts random string back to MAC address using stored mapping
   */
  decode(randomString: string): string | null {
    return this.mapping.get(randomString) || null
  }

  /**
   * Clear all stored mappings
   */
  clear(): void {
    this.mapping.clear()
  }
}

// Example usage:
// const mac1 = '00:1A:2B:3C:4D:5E:6F'
// const mac2 = 'A4:5E:60:D8:9F:2C'

// console.log('=== Direct Function Usage ===')
// const randomStr1 = macStr(mac1)
// const randomStr2 = macStr(mac2, 24)
// console.log(`MAC: ${mac1} -> Random String: ${randomStr1}`)
// console.log(`MAC: ${mac2} -> Random String: ${randomStr2}`)

// // Reverse lookup (requires list of possible MAC addresses)
// const knownMacs = [mac1, mac2, 'FF:FF:FF:FF:FF:FF']
// const foundMac = strMac(randomStr1, knownMacs)
// console.log(`Random String: ${randomStr1} -> MAC: ${foundMac}`)

// console.log('\n=== Using Converter Class ===')
// const converter = new MacAddressConverter()
// const encoded1 = converter.encode(mac1)
// const encoded2 = converter.encode(mac2)
// console.log(`Encoded ${mac1} -> ${encoded1}`)
// console.log(`Encoded ${mac2} -> ${encoded2}`)
// console.log(`Decoded ${encoded1} -> ${converter.decode(encoded1)}`)
// console.log(`Decoded ${encoded2} -> ${converter.decode(encoded2)}`)
